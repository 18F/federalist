version: 2

default-docker-node: &default-docker-node
  image: circleci/node:12
  environment:
    YARN_VERSION: 0.24.6-1
    CC_TEST_REPORTER_ID: 101a439651b6abd27e5440028a53b5b8f08fe0889f3948d5f58f6cf9f7c786a0

default-docker-postgres: &default-docker-postgres
  image: circleci/postgres:9.6
  environment:
    POSTGRES_USER: ci-test-user
    POSTGRES_DB: federalist-ci-test
    POSTGRES_HOST_AUTH_METHOD: trust

deploy-command: &deploy-command
  command: |
    set -o pipefail

    curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github' \
      && sudo dpkg -i cf7.deb \
      && rm cf7.deb

    cf7 api $CF_API

    echo "Logging in to $CF_ORGANIZATION org, $CF_SPACE space."
    cf7 login -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORGANIZATION -s $CF_SPACE

    echo "Deploying to $CF_SPACE space."
    cf7 push $CF_APP --strategy rolling --vars-file $CF_VARS_FILE -f $CF_MANIFEST

    cf7 logout


jobs:
  build:
     docker:
       - *default-docker-node
       - *default-docker-postgres
     steps:
      - checkout
      - run:
          name: Display versions
          command: |
            echo $(node --version)
            echo $(yarn --version)
            echo $(npm --version)

      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn --pure-lockfile
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache/yarn

      - run:
          name: Lint changed files
          command: scripts/lint-ci-pr.sh

      - run:
          name: CodeClimate before-build
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Run tests
          command: yarn test
      - run:
          name: CodeClimate combine and upload coverage
          command: |
            # Combine the test coverage reports in coverage/server/ and coverage/client/
            ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.client.json coverage/client/lcov.info
            ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.server.json coverage/server/lcov.info
            ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
            # Attempt to submit a report, but don't fail the build if this fails (`|| true`)
            ./cc-test-reporter upload-coverage || true

  deploy-staging:
    machine: true    
    environment:
      CF_API: https://api.fr.cloud.gov
      CF_ORGANIZATION: gsa-18f-federalist
      CF_SPACE: staging
      CF_APP: federalistapp-staging
      CF_VARS_FILE: ./.cloudgov/vars/staging.yml
      CF_MANIFEST: ./.cloudgov/manifest.yml
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Setup Credentials
          command: |
            echo "export CF_USERNAME=$CF_USERNAME_STAGING" >> $BASH_ENV
            echo "export CF_PASSWORD=$CF_PASSWORD_STAGING" >> $BASH_ENV
      - deploy:
          <<: *deploy-command

  deploy-production:
    machine: true
    environment:
      CF_API: https://api.fr.cloud.gov      
      CF_ORGANIZATION: gsa-18f-federalist
      CF_SPACE: production
      CF_APP: federalistapp
      CF_VARS_FILE: ./.cloudgov/vars/production.yml
      CF_MANIFEST: ./.cloudgov/manifest.yml
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Setup Credentials
          command: |
            echo "export CF_USERNAME=$CF_USERNAME_PRODUCTION" >> $BASH_ENV
            echo "export CF_PASSWORD=$CF_PASSWORD_PRODUCTION" >> $BASH_ENV
      - deploy:
          <<: *deploy-command

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - staging
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only:
                - master